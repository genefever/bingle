{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://bingle/./src/utils/storage.ts","webpack://bingle/webpack/bootstrap","webpack://bingle/webpack/runtime/define property getters","webpack://bingle/webpack/runtime/hasOwnProperty shorthand","webpack://bingle/webpack/runtime/make namespace object","webpack://bingle/./src/background/background.ts"],"sourcesContent":["// Setter function to set LocalStorageOptions.\nexport function setStoredOverlayOption(overlayOption) {\n    const val = {\n        overlayOption,\n    };\n    return new Promise((resolve) => {\n        chrome.storage.local.set(val, () => {\n            resolve();\n        });\n    });\n}\n// Getter function to retrieve LocalStorageOptions.\nexport function getStoredOverlayOption() {\n    const keys = ['overlayOption'];\n    return new Promise((resolve) => {\n        chrome.storage.local.get(keys, (res) => {\n            resolve(res);\n        });\n    });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { setStoredOverlayOption } from '../utils/storage';\n// Called when extension is first installed.\nchrome.runtime.onInstalled.addListener(() => {\n    setStoredOverlayOption('enable');\n    // Show Bingle chrome extension by default in the right-click dropdown.\n    chrome.contextMenus.create({\n        title: 'Search on Bingle',\n        id: 'contextMenu1',\n        contexts: ['selection'],\n    });\n});\n// Listens to \"Enable/Disable\" settings changes from popup.tsx.\nchrome.runtime.onMessage.addListener((message) => {\n    if (message.type === 'SET_ENABLE') {\n        if (message.enable === true) {\n            // Show Bingle chrome extension in the right-click dropdown.\n            chrome.contextMenus.create({\n                title: 'Search on Bingle',\n                id: 'contextMenu1',\n                contexts: ['selection'],\n            });\n        }\n        else {\n            // Remove Bingle chrome extension in the right-click dropdown.\n            chrome.contextMenus.remove('contextMenu1');\n        }\n    }\n});\n// Send the highlighted query text to contentScript.tsx.\nchrome.contextMenus.onClicked.addListener((e) => {\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n        chrome.tabs.sendMessage(tabs[0].id, {\n            type: 'SET_QUERY',\n            query: e.selectionText,\n        });\n    });\n});\n"],"names":[],"sourceRoot":""}